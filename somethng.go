package main

import (
	"encoding/json"
	"fmt"
	"html/template"
	"io/ioutil"
	"net/http"
	"os"
)

type autoGenerated struct {
	Pagination struct {
		NextMinID          string `json:"next_min_id"`
		MinTagID           string `json:"min_tag_id"`
		DeprecationWarning string `json:"deprecation_warning"`
	} `json:"pagination"`
	Data []struct {
		ID   string `json:"id"`
		User struct {
			ID             string `json:"id"`
			FullName       string `json:"full_name"`
			ProfilePicture string `json:"profile_picture"`
			Username       string `json:"username"`
		} `json:"user"`
		Images struct {
			Thumbnail struct {
				Width  int    `json:"width"`
				Height int    `json:"height"`
				URL    string `json:"url"`
			} `json:"thumbnail"`
			LowResolution struct {
				Width  int    `json:"width"`
				Height int    `json:"height"`
				URL    string `json:"url"`
			} `json:"low_resolution"`
			StandardResolution struct {
				Width  int    `json:"width"`
				Height int    `json:"height"`
				URL    string `json:"url"`
			} `json:"standard_resolution"`
		} `json:"images"`
		CreatedTime string `json:"created_time"`
		Caption     struct {
			ID          string `json:"id"`
			Text        string `json:"text"`
			CreatedTime string `json:"created_time"`
			From        struct {
				ID             string `json:"id"`
				FullName       string `json:"full_name"`
				ProfilePicture string `json:"profile_picture"`
				Username       string `json:"username"`
			} `json:"from"`
		} `json:"caption"`
		UserHasLiked bool `json:"user_has_liked"`
		Likes        struct {
			Count int `json:"count"`
		} `json:"likes"`
		Tags     []string `json:"tags"`
		Filter   string   `json:"filter"`
		Comments struct {
			Count int `json:"count"`
		} `json:"comments"`
		Type         string        `json:"type"`
		Link         string        `json:"link"`
		Location     interface{}   `json:"location"`
		Attribution  interface{}   `json:"attribution"`
		UsersInPhoto []interface{} `json:"users_in_photo"`
	} `json:"data"`
	Meta struct {
		Code int `json:"code"`
	} `json:"meta"`
}

type pageData struct {
	PageTitle string
	Listy     []string
}

var tmpl *template.Template
var token = "" ///Insert your token here
var hashtag = "yang"

func main() {

	tmpl = template.Must(template.ParseFiles("layout.html"))
	http.HandleFunc("/", indexhandler)
	http.ListenAndServe(":8080", nil)
}

func indexhandler(w http.ResponseWriter, r *http.Request) {

	fmt.Println("donno why ")
	//get jason data from instagram api
	sdata := ""
	response, err := http.Get("https://api.instagram.com/v1/tags/yang/media/recent?access_token=332074502.e1e82ec.36570dc7e00f461687dcb73aa88d4fc3")
	if err != nil {
		fmt.Printf("request failed: %s", err)
		defer fmt.Println("!")
		os.Exit(1)
	}

	data, _ := ioutil.ReadAll(response.Body)
	sdata = string(data)
	//fmt.Println(sdata)

	var result autoGenerated
	json.Unmarshal([]byte(sdata), &result)

	var listofimages []string
	for _, rezdata := range result.Data {
		p := rezdata.Images.LowResolution.URL
		listofimages = append(listofimages, p)
		fmt.Println(listofimages)
	}

	dt := pageData{
		PageTitle: "My insta list",
		Listy:     listofimages,
	}
	fmt.Println("executing ")
	tmpl.Execute(w, dt)
}
